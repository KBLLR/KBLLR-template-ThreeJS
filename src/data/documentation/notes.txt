------------------------------------------------------------------------------ ◉
# THREE.BAS https://github.com/zadvorsky/three.bas

### Buffer Animation System 

THREE Buffer Animation System is an extension for THREE.js. It simplifies the workflow of extending the built-in THREE.js materials to include animation logic in the vertex shader. For an overview of this approach, check out this tutorial series.

The standard way of animating objects in THREE.js is to change the values of position, rotation and scale on the CPU and upload the results to the GPU as a transformation matrix. As the number of objects increases, the volume of data sent to the GPU each frame becomes a bottleneck. THREE.BAS works around this issue by storing additional information on the GPU when the geometry is created (using attributes). The animation state is then determined in the vertex shader based on a small number of uniform values.

------------------------------------------------------------------------------ ◉
# COORDINATE SPACES

>> Pixel coordinate space {x: viewportWidth, y: viewportHeight} 
>> Normalized Device Coordinates (center of the screen at {x: 0, y: 0}) 
>> 3D Coordinates (World Space) starts at center at {x: 0, y: 0, z: 0}
>> UV Space (Texture Maps) bottom left corner at {u: 0, v: 0}, and moves right and up to {u: 1.0, v: 1.0}

´´´
window.addEventListener('mousemove', function(e) {
  var x = (e.clientX / window.innerWidth * 2) - 1;
  var y = (e.clientY / window.innerHeight * -2) + 1;
  
  // something awesome
});

*This converts the position of the pointer on screen from pixel coordinates to  Normalized Device Coordinates.

´´´
------------------------------------------------------------------------------ ◉
# SCENE

´´´
var scene = {
  children: []
};

var camera = new THREE.PerspectiveCamera();
var renderer = new Renderer();

´´´
------------------------------------------------------------------------------ ◉
# DEFINING GEOMETRY

Properties of vertices are called attributes. Alongside position, a typical vertex will have an attribute called a normal (a 3D point perpendicular to the surface of the model), used for lighting calculations, and a UV coordinate, used for texture mapping. Like JavaScript objects, vertices can have any number of attributes. This is limited only by the quality of your GPU, though you are much more likely to run into other issues before the number of attributes becomes a problem.

var vertex = {
  position: {x: 0, y: 0, z: 0},
  normal: {x: 0, y: 0, z: 1},
  uv: {u: 0, v: 0}
  // etc...
};

var mesh = {
  geometry: {
    vertices: [
      // top left corner
      { position: {x: -100, y:  50, z: 0} },
      // top right corner      
      { position: {x:  100, y:  50, z: 0} },
      // bottom right corner
      { position: {x:  100, y: -50, z: 0} },
      // bottom left corner
      { position: {x: -100, y: -50, z: 0} }    
    ]
  }
};

------------------------------------------------------------------------------ ◉
# CAMERA CONTROLS 
https://github.com/yomotsu/camera-controls

Note: If you do not wish to use the entire three.js to reduce file size(tree-shaking for example), make a subset to install.

import {
	Vector2,
	Vector3,
	Vector4,
	Quaternion,
	Matrix4,
	Spherical,
	Box3,
	Sphere,
	Raycaster,
} from 'three';

const subsetOfTHREE = {
	Vector2   : Vector2,
	Vector3   : Vector3,
	Vector4   : Vector4,
	Quaternion: Quaternion,
	Matrix4   : Matrix4,
	Spherical : Spherical,
	Box3      : Box3,
	Sphere    : Sphere,
	Raycaster : Raycaster,
};

CameraControls.install( { THREE: subsetOfTHREE } );

------------------------------------------------------------------------------ ◉
# MATERIALS 

### Material Constants https://threejs.org/docs/index.html#api/en/constants/Materials

//These constants define properties common to all material types, with the exception of Texture Combine Operations which only apply to MeshBasicMaterial, MeshLambertMaterial and MeshPhongMaterial.
//---✧ SIDE
// Defines which side of faces will be rendered - front, back or both. Default is FrontSide.
// THREE.FrontSide 
// THREE.BackSide 
// THREE.DoubleSide

//---✧ BLENDING MODE
NormalBlending is the default. Note that CustomBlending must be set to use Custom Blending Equations.

>> THREE.NoBlending 
>> THREE.NormalBlending 
>> THREE.AdditiveBlending
>> THREE.SubtractiveBlending 
>> THREE.MultiplyBlending 
>> THREE.CustomBlending

Control the source and destination blending equations for the material's RGB and Alpha sent to the WebGLRenderer for use by WebGL.

Depth Mode
THREE.NeverDepth
THREE.AlwaysDepth 
THREE.EqualDepth 
THREE.LessDepth
THREE.LessEqualDepth 
THREE.GreaterEqualDepth 
THREE.GreaterDepth
THREE.NotEqualDepth

Which depth function the material uses to compare incoming pixels Z-depth against the current Z-depth buffer value. If the result of the comparison is true, the pixel will be drawn.

>> NeverDepth will never return true.
>> AlwaysDepth will always return true.
>> EqualDepth will return true if the incoming pixel Z-depth is equal to the current buffer Z-depth.
>> LessDepth will return true if the incoming pixel Z-depth is less than the current buffer Z-depth.
>> LessEqualDepth is the default and will return true if the incoming pixel Z-depth is less than or equal to the current buffer Z-depth.
>> GreaterEqualDepth will return true if the incoming pixel Z-depth is greater than or equal to the current buffer Z-depth.
>> GreaterDepth will return true if the incoming pixel Z-depth is greater than the current buffer Z-depth.
>> NotEqualDepth will return true if the incoming pixel Z-depth is not equal to the current buffer Z-depth.

//---✧ TEXTURE COMBINE OPERATIONS

THREE.MultiplyOperation 
THREE.MixOperation 
THREE.AddOperation

These define how the result of the surface's color is combined with the environment map (if present), for MeshBasicMaterial, MeshLambertMaterial and MeshPhongMaterial.
MultiplyOperation is the default and multiplies the environment map color with the surface color.
MixOperation uses reflectivity to blend between the two colors.
AddOperation adds the two colors.

Stencil Functions
THREE.NeverStencilFunc 
// THREE.LessStencilFunc 
// THREE.EqualStencilFunc
// THREE.LessEqualStencilFunc 
// THREE.GreaterStencilFunc
// THREE.NotEqualStencilFunc 
// THREE.GreaterEqualStencilFunc
// THREE.AlwaysStencilFunc

// Which stencil function the material uses to determine whether or not to perform a stencil operation.

// NeverStencilFunc will never return true.
// LessStencilFunc will return true if the stencil reference value is less than the current stencil value.
// EqualStencilFunc will return true if the stencil reference value is equal to the current stencil value.
// LessEqualStencilFunc will return true if the stencil reference value is less than or equal to the current stencil value.
// GreaterStencilFunc will return true if the stencil reference value is greater than the current stencil value.
// NotEqualStencilFunc will return true if the stencil reference value is not equal to the current stencil value.
// GreaterEqualStencilFunc will return true if the stencil reference value is greater than or equal to the current stencil value.
// AlwaysStencilFunc will always return true.

// Stencil Operations

// THREE.ZeroStencilOp 
// THREE.KeepStencilOp 
// THREE.ReplaceStencilOp
// THREE.IncrementStencilOp 
// THREE.DecrementStencilOp
// THREE.IncrementWrapStencilOp 
// THREE.DecrementWrapStencilOp
// THREE.InvertStencilOp

// Which stencil operation the material will perform on the stencil buffer pixel if the provided stencil function passes.

// ZeroStencilOp will set the stencil value to 0.
// KeepStencilOp will not change the current stencil value.
// ReplaceStencilOp will replace the stencil value with the specified stencil reference value.
// IncrementStencilOp will increment the current stencil value by 1.
// DecrementStencilOp will decrement the current stencil value by 1.
// IncrementWrapStencilOp will increment the current stencil value by 1. If the value increments past 255 it will be set to 0.
// DecrementWrapStencilOp will increment the current stencil value by 1. If the value decrements below 0 it will be set to 255.
// InvertStencilOp will perform a bitwise inversion of the current stencil value.

// Normal map type
// THREE.TangentSpaceNormalMap 
// THREE.ObjectSpaceNormalMap

// Defines the type of the normal map. For TangentSpaceNormalMap, the information is relative to the underlying surface. For ObjectSpaceNormalMap, the information is relative to the object orientation. Default is TangentSpaceNormalMap.

// GLSL Version
// THREE.GLSL1 
// THREE.GLSL3


### MeshPhysicalMaterial:

- Highly Detailed Objects: MeshPhysicalMaterial is used for objects that require high levels of detail, such as characters in character modeling, detailed architectural elements, or any object that needs physically-based rendering (PBR).

- Realistic Surfaces: It's ideal for objects with realistic surfaces that interact with light in a physically accurate way, like metals, glass, and plastics.

- Realistic Lighting: MeshPhysicalMaterial can take full advantage of advanced lighting and shading techniques, making it suitable for objects in scenes with realistic lighting.

Cars
Furniture
People
Animals
Plants
Food
Metal objects
Glass objects
Plastic objects

***

### MeshStandard Material:

- General Use: Standard materials are commonly used for a wide range of objects in 3D scenes. They provide a good balance between realism and performance.

- Everyday Objects: Standard materials are suitable for everyday objects like furniture, walls, and basic 3D assets where a high level of detail and physical accuracy isn't necessary.

- Objects with Textures: When objects in the scene rely on textures for their appearance, standard materials work well.

Game objects
Architectural models
Product models
UI elements
Icons
Logos
Text

***

### MeshBasicMaterial:

- Low Detail Objects: MeshBasicMaterial is used for objects that don't require high levels of detail, and where simplicity is preferred.

- Flat Shading: It's ideal for objects with flat shading and without complex lighting interactions.

- Objects in Simple Scenes: Basic materials are suitable for objects in simple scenes, like placeholders or objects in a scene where realism is not the primary focus.

Billboards
Wireframes
Placeholders
Simple shapes
Low-poly models

***
------------------------------------------------------------------------------ ◉
# HARDWARE / REQUIREMENTS / BENCHMARKING
---

# CPU BENCHMARKS
- https://www.cpubenchmark.net/singleThread.html


------------------------------------------------------------------------------ ◉
# UNIFIED NEURAL ENCODING
---

The Bidirectional Texture Function (BTF) is a data-driven solution to render materials with complex appearance. A typical capture contains tens of thousands of images of a material sample under varying viewing and lighting conditions. While capable of faithfully recording complex light interactions in the material, the main drawback is the massive memory requirement, both for storing and rendering, making effective compression of BTF data a critical component in practical applications.


https://rgl.epfl.ch/publications/Rainer2020Unified
https://reality.cs.ucl.ac.uk/projects/btf/rainer19neural.html

NEURAL BTF COMPRESSION AND INTERPOLATION
https://reality.cs.ucl.ac.uk/projects/btf/rainer19neural.html

HIGH-RESOLUTION BTF CAPTURE FOR DELICATE MATERIALS
https://reality.cs.ucl.ac.uk/projects/btf/rainer2019highresolution.html

------------------------------------------------------------------------------ ◉

### CGI DATABASES & RESOURCES
https://github.com/afichet/cgi-resources


### Miguel Crespo (RGL) resources and useful Links
https://mcrespo.me/

### RGL - Realistic Graphics Lab  Papers
https://rgl.epfl.ch/publications

### Imaging and Vision Laboratory
https://cave.cs.columbia.edu/

### HDRI Maps 
https://noemotionhdrs.net/hdrother.html

------------------------------------------------------------------------------ ◉
# TOOLS
---

### RefractiveIndex.info
- https://refractiveindex.info/

### Tekari - A BSDF-data visualization and editing tool.
- https://github.com/rgl-epfl/tekari?tab=readme-ov-file#pgII

### ART - Advanced Rendering Toolkit
- https://cgg.mff.cuni.cz/ART/

### NVIDIA Developer Tools Overview
- https://developer.nvidia.com/tools-overview-old

------------------------------------------------------------------------------ ◉
# COLOR SPACE - COLOR MANAGEMENT - Linear sRGBA - sRGBA
---

- https://threejs.org/docs/#manual/en/introduction/Color-management

- https://en.wikipedia.org/wiki/RGB_color_space

- https://en.wikipedia.org/wiki/Gamma_correction

- https://libpng.org/pub/png/spec/1.2/PNG-GammaAppendix.html

- https://poynton.com/notes/colour_and_gamma/GammaFAQ.html 

- https://stackoverflow.com/questions/12524623/
what-are-the-practical-differences-when-working-with-colors-in-a-linear-vs-a-no/12894053#12894053
https://developer.nvidia.com/gpugems/gpugems3/part-iv-image-effects/chapter-24-importance-being-linears

### Physics & COlor SCience: Planckian locus
- https://en.wikipedia.org/wiki/Planckian_locus#Approximation

------------------------------------------------------------------------------ ◉
# FILTERS
---

### Anisotropic Filtering:
Retains the "sharpness" of a texture normally lost by MIP map texture's attempts to avoid aliasing. Anisotropic filtering can therefore be said to maintain crisp texture detail at all viewing orientations while providing fast anti-aliased texture filtering.

Example: https://threejs.org/examples/?q=anisotropy#webgl_materials_texture_anisotropy
Wikipedia: https://en.wikipedia.org/wiki/Anisotropic_filtering

Matirial DataBase - https://rgl.epfl.ch/materials
Anisotropic DataSEt - https://rgl.s3.eu-central-1.amazonaws.com/media/papers/Dupuy2018Adaptive_2.pdf
Isotropic DataSEt - https://rgl.s3.eu-central-1.amazonaws.com/media/papers/Dupuy2018Adaptive_1.pdf

------------------------------------------------------------------------------ ◉
# CUBE TEXTURE LOADER
---

- https://threejs.org/docs/#api/en/loaders/CubeTextureLoader
- https://threejs.org/examples/?q=cubemap#webgl_materials_cubemap_dynamic
- https://threejs.org/docs/#api/en/textures
- https://learnopengl.com/Advanced-OpenGL/Cubemaps
- https://www.andrewwillmott.com/tech-notes#TOC-Spherical-Harmonics
- https://cgg.mff.cuni.cz/publications/an-openexr-layout-for-spectral-images/

------------------------------------------------------------------------------ ◉
# PBR- Physically Based Rendering
---

- https://lousodrome.net/blog/light/2011/12/27/readings-on-physically-based-rendering/
- https://marmoset.co/posts/physically-based-rendering-and-you-can-too/
- https://marmoset.co/posts/pbr-texture-conversion/

### Metals Study (Behance)
- https://www.behance.net/gallery/35636521/Material-Studies-Metals


------------------------------------------------------------------------------ ◉
# DOCS
---

### Spectral Viewer
- https://mrf-devteam.gitlab.io/spectral-viewer/documentation/

### supabase DOCS - pgvector: Embeddings and vector similarity
- https://supabase.com/docs/guides/database/extensions/pgvector

### OPenaI API DOCS
- https://platform.openai.com/docs/introduction/overview
- https://platform.openai.com/docs/guides/embeddings/limitations-risks

------------------------------------------------------------------------------ ◉
# SHADERS 
---


------------------------------------------------------------------------------ ◉
# SOCIAL
---
### DEMOZOO
- https://demozoo.org/parties/4536/

------------------------------------------------------------------------------ ◉
# THREEJS
---

- https://threejs
- https://threejs.org/docs/#api/en/constants/Textures
- https://threejs.org/docs/#api/geometries/BoxGeometry
- https://threejs.org/docs/#api
- https://discourse.threejs.org/t/three-js-bookshelf/2468

------------------------------------------------------------------------------ ◉
# SHADERS
---



------------------------------------------------------------------------------ ◉
# POINT CLOUDS / GAUSSIAN SPLATTING / NERFS
---

### Real Time Radial Field Rendering
- https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/

------------------------------------------------------------------------------ ◉
# GOOGLE MEDIA PIPELINE
---

### Google Media Pipeline
- https://github.com/google/mediapipe

### P5 Demo HandTracking + Facial Landmarks
https://editor.p5js.org/orrkislev/sketches/wwLqrnVDt

### Kalidokit is the mocap calculator for Kalidoface powered by Tensorflow.js/Mediapipe.  
It is open source and available for developers to create their own face and body tracking apps! 
https://github.com/yeemachine/kalidokit

# INSPIRATION
---
### Skyl - Technologist, interaction designer, new media art
- https://skyl.fr/work

### P5.js Showcase 2022
- https://showcase.p5js.org/#/2022-All


------------------------------------------------------------------------------ ◉
# MODELS
---

### Swift Diffusers for Mac (native)
- https://huggingface.co/blog/fast-mac-diffusers


# RESPONSIBLE AI PRACTICES
---
- https://cloud.google.com/vertex-ai/docs/generative-ai/learn/responsible-ai
- https://blog.google/technology/ai/a-shared-agenda-for-responsible-ai-progress/

------------------------------------------------------------------------------ ◉
# LIBRARIES
---

## Animation Libraries:
-

### TheatreJS
https://www.theatrejs.com/

### Gsap
https://greensock.com/gsap/

### P5 Shaders
- https://p5js.org/
- https://itp-xstory.github.io/p5js-shaders/#/

### ML5.org
- https://ml5js.org/

### Tetoki 
- https://www.tetoki.eu/vida/blobs_demystified_static_background_camera.html

### PYTHON

### PyTorch edge ExecuTorch [INFERENCE small devices]
- https://pytorch.org/blog/pytorch-edge/?utm_source=tldrai
- https://ai.google/responsibility/responsible-ai-practices/

### 3D vedo - A python module for scientific analysis and visualization of эd objects
- https://vedo.embl.es/

### NAPARI Visualizer
-- https://napari.org/stable/gallery.html#gallery


------------------------------------------------------------------------------ ◉
# GRAPH THEORY / KNOWLEDGE GRAPHS
---

# INFRANODUS
- https://infranodus.com/

### Cytoscape.js, Graph theory (network) library for visualisation and analysis
- https://js.cytoscape.org/


------------------------------------------------------------------------------ ◉
# COURSES / TUTORIALS
---

### A11y - Accessibility Project001
- https://www.a11yproject.com/

### Physically Based Rendering 
https://pbr-book.org/3ed-2018/contents

### SIGRAPH 2017 Course: Physically Based Shading in Theory and Practice 
https://blog.selfshadow.com/publications/s2017-shading-course/

### SIGRAPH 2020 Course: Physically Based Shading in Theory and Practice 
https://blog.selfshadow.com/publications/s2020-shading-course/#materialx

### RAYMARCHING WORKSHOP
https://github.com/electricsquare/raymarching-workshop

### INMMERSIVE MATH
https://immersivemath.com/ila/index.html

### First Principles of Computer Vision
https://fpcv.cs.columbia.edu/
https://fpcv.cs.columbia.edu/Monographs

### Mitsuba 3 - Inverse Rendering Tutorials
- https://mitsuba.readthedocs.io/en/stable/src/inverse_rendering_tutorials.html

### Python Tutorials
- https://www.python.org/
- https://www.geeksforgeeks.org/python-programming-language/
- https://www.w3schools.com/python/
- https://www.tutorialspoint.com/python/index.htm

### Synthetic Data Generation for Training Computer Vision Models
- https://courses.nvidia.com/courses/course-v1:DLI+S-OV-10+V1/


### Solving PDEs in Python - The FEniCS Tutorial Volume I
- https://fenicsproject.org/pub/tutorial/html/._ftut1001.html

------------------------------------------------------------------------------ ◉
# DATASETS
---

### RGL Material Database
- https://rgl.epfl.ch/materials

### Columbia-Utrecht Reflectance and Texture Database
- https://cave.cs.columbia.edu/repository/CURET

### Columbia Multi-Spectral Database
- https://www.cs.columbia.edu/CAVE/databases/multispectral/

### Columbia Gaze Data Set
- https://cave.cs.columbia.edu/repository/ColumbiaGazeDataSet

### Chinook SQLite sample database (use with chat models when execute functions whose inputs are model-generated, and use this to implement an agent that can answer questions for us about a database.)
- https://www.sqlitetutorial.net/sqlite-sample-database/

### Fashion-MNIST
- https://github.com/zalandoresearch/fashion-mnist


------------------------------------------------------------------------------ ◉
# PROMPT ENGINERRING
---

### Prompts to generate ICons (DALLE-e)
- https://twitter.com/techhalla/status/1713352517889749185

### OpenAI Cookbook
- https://beta.openai.com/docs/engines/cookbook



------------------------------------------------------------------------------ ◉
# GITHUB Repositories  
---

### Buffer Animation System
- https://github.com/zadvorsky/three.bas

### Camera Controls
- https://github.com/yomotsu/camera-controls

### PBRT Loader
- https://github.com/mmp/pbrt-v3?tab=readme-ov-file

### BRDF Loader
- https://github.com/rgl-epfl/brdf-loader

### Spectral EXR Viewer
- https://github.com/afichet/spectral-exr?tab=readme-ov-file

### LUTS - Color Correcting for types of colour blindness, protanopia, deuteranopia, and tritanopia. 
- https://github.com/andrewwillmott/colour-blind-luts

### Sky Models
- https://github.com/andrewwillmott/sun-sky

### Shader Minifier
- https://github.com/laurentlb/shader_minifier

### Material-X
- https://github.com/AcademySoftwareFoundation/MaterialX

### Chat GPT retrieval Plugin 
- https://github.com/openai/chatgpt-retrieval-plugin

### Axios - Promise based HTTP client 
- https://github.com/axios/axios

------------------------------------------------------------------------------ ◉
# APIS
---

### Public APIS
- https://github.com/public-apis/public-apis

### Material-X
- https://materialx.org/docs/api/index.html

### OpenAI API
- https://beta.openai.com/docs/api-reference/

### OpenAI CLI
- https://beta.openai.com/docs/api

### Microlink API
- https://microlink.io/docs/api/parameters/
- https://microlink.io/docs

### Public graphs API
- https://github.com/graphql-kit/graphql-apis